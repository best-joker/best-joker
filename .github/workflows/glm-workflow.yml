name: GLM Code Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  glm-assistant:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@glm')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@glm')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@glm')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@glm') || contains(github.event.issue.title, '@glm')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read # Required for GLM to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup Bun Runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Dependencies
        run: |
          bun install

      - name: Extract Prompt from GitHub Event
        id: extract-prompt
        run: |
          # 根据事件类型提取触发内容
          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
            # 移除触发短语，获取实际指令
            PROMPT=$(echo "$COMMENT_BODY" | sed "s/@glm//g" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          elif [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
            PROMPT=$(echo "$COMMENT_BODY" | sed "s/@glm//g" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          elif [ "${{ github.event_name }}" == "issues" ]; then
            ISSUE_BODY="${{ github.event.issue.body }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            if [[ "$ISSUE_TITLE" == *"@glm"* ]]; then
              PROMPT=$(echo "$ISSUE_TITLE" | sed "s/@glm//g" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            elif [[ "$ISSUE_BODY" == *"@glm"* ]]; then
              PROMPT=$(echo "$ISSUE_BODY" | sed "s/@glm//g" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            else
              PROMPT="$ISSUE_TITLE"
            fi
          elif [ "${{ github.event_name }}" == "pull_request_review" ]; then
            REVIEW_BODY="${{ github.event.review.body }}"
            PROMPT=$(echo "$REVIEW_BODY" | sed "s/@glm//g" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          else
            PROMPT="请分析当前的GitHub事件并提供帮助"
          fi

          # 输出prompt供后续步骤使用
          echo "prompt=$PROMPT" >> $GITHUB_OUTPUT
          echo "Extracted prompt: $PROMPT"

      - name: Run GLM Code Assistant
        id: glm
        uses: ./ # 使用当前仓库作为action
        with:
          glm_api_key: ${{ secrets.GLM_API_KEY }}
          glm_base_url: ${{ secrets.GLM_BASE_URL || 'https://open.bigmodel.cn/api/paas/v4/' }}
          model: ${{ secrets.GLM_MODEL || 'glm-4.6' }}
          trigger_phrase: "@glm"
          max_turns: "10"
          prompt: ${{ steps.extract-prompt.outputs.prompt }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # Optional: Configure GLM's behavior with CLI arguments
          glm_args: |
            --model glm-4.6
            --max-turns 10
            --allowedTools "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*),Edit,Replace,Read,Glob,Grep,Write"

          # Optional: Advanced settings configuration
          settings: |
            {
              "env": {
                  "NODE_ENV": "production",
                  "DEBUG": "false"
              },
              "permissions": {
                  "allow": ["Read", "Write", "Edit", "Bash"],
                  "deny": []
              }
            }

      - name: Comment on Issue or PR
        if: steps.glm.outputs.success == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 确定评论类型和编号
          if [ "${{ github.event_name }}" == "issue_comment" ] || [ "${{ github.event_name }}" == "issues" ]; then
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            COMMENT_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments"
          elif [ "${{ github.event_name }}" == "pull_request_review_comment" ] || [ "${{ github.event_name }}" == "pull_request_review" ]; then
            ISSUE_NUMBER="${{ github.event.pull_request.number }}"
            COMMENT_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments"
          else
            echo "未知事件类型，无法评论"
            exit 0
          fi

          # 构建评论内容
          GLM_RESPONSE="${{ steps.glm.outputs.response }}"
          COMMENT_BODY="🤖 **GLM 4.6 回复**

          ${GLM_RESPONSE}

          ---
          *由 @glm 触发*"

          # 创建评论
          curl -X POST "${COMMENT_URL}" \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "$(echo "{}" | jq --arg body "${COMMENT_BODY}" '.body = $body')"

          echo "评论已发布到 #${ISSUE_NUMBER}"